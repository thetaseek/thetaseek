{"version":3,"sources":["components/OptionsSelector.js","store/websocket.js","services/deribit.js","services/deribit-utils.js","components/Websocket.js","store/tickers.js","store/instruments.js","App.js","store/store.js","serviceWorker.js","index.js","services/reconnecting-websocket.js"],"names":["MinMaxFilter","props","valueChanged","event","that","setState","target","name","value","parentFilterInstance","instance","state","min","max","setModel","filterType","type","filter","filterTo","parentModel","this","style","width","margin","padding","display","alignItems","height","className","placeholder","onChange","React","Component","connect","options","tickers","instruments","forwardRef","columnDefs","field","headerName","comparator","valueA","valueB","nodeA","nodeB","isInverted","data","expirationTimestamp","strike","optionType","localeCompare","valueFormatter","params","underlyingPrice","toFixed","map","x","Object","assign","floatingFilterComponent","floatingFilterComponentParams","suppressFilterButton","rowData","values","instrumentName","id","onGridReady","console","log","api","sizeColumnsToFit","floatingFilter","defaultColDef","resizable","sortable","deltaRowDataMode","getRowNodeId","frameworkComponents","customNumberMinMaxFilter","slice","createSlice","initialState","isOpen","reducers","open","close","actions","selectors","websocket","socket","ReconnectingWebsocket","automaticOpen","addEventListener","e","CustomEvent","transformReply","r","isPlainObject","reduce","result","key","camelCase","isArray","JSON","parse","dispatchEvent","ws","reconnect","timer","interval","allowance","resetTimer","clearTimeout","setTimeout","warn","send","stringify","method","Math","parseInt","jsonrpc","Date","now","message","manageSession","refresh","subscriptions","channels","keys","channel","Websocket","dispatch","useDispatch","useEffect","debug","once","useSelector","backgroundColor","borderRadius","marginRight","marginLeft","marginBottom","update","payload","success","request","timeout","Promise","resolve","reject","Error","readyState","callback","removeEventListener","call","currency","kind","expired","then","orderBy","keyBy","App","isEmpty","channelArg","handler","castArray","forEach","i","subscriptionAdd","d","subscriptionRemove","textAlign","configureStore","middleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","define","ReconnectingWebSocket","prototype","onopen","onclose","onconnecting","onmessage","onerror","debugAll","CONNECTING","WebSocket","OPEN","CLOSING","CLOSED","url","protocols","settings","reconnectInterval","maxReconnectInterval","reconnectDecay","timeoutInterval","maxReconnectAttempts","binaryType","reconnectAttempts","protocol","self","forcedClose","timedOut","eventTarget","createElement","generateEvent","s","args","evt","createEvent","initCustomEvent","bind","reconnectAttempt","localWs","isReconnect","code","reason","wasClean","pow"],"mappings":"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","file":"static/js/main.21f930eb.chunk.js","sourcesContent":["import React from \"react\";\nimport map from \"lodash/map\";\nimport {connect} from \"react-redux\";\nimport {AgGridReact} from \"ag-grid-react\";\n\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham-dark.css\";\n// Override ag-grid theme\nimport \"./OptionsSelector.css\";\n\nexport class MinMaxFilter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      min: \"\",\n      max: \"\",\n    };\n  }\n\n  valueChanged = (event) => {\n    const that = this;\n    this.setState(\n      {\n        [event.target.name]: event.target.value,\n      },\n      () => {\n        this.props.parentFilterInstance(function (instance) {\n          const {min, max} = that.state;\n          if (min && max) {\n            return instance.setModel({\n              filterType: \"number\",\n              type: \"inRange\",\n              filter: min,\n              filterTo: max,\n            });\n          }\n          if (min) {\n            return instance.setModel({\n              filterType: \"number\",\n              type: \"greaterThanOrEqual\",\n              filter: min,\n            });\n          }\n          if (max) {\n            return instance.setModel({\n              filterType: \"number\",\n              type: \"lessThanOrEqual\",\n              filter: max,\n            });\n          }\n          return instance.setModel(null);\n        });\n      }\n    );\n  };\n\n  onParentModelChanged(parentModel) {\n    switch (parentModel ? parentModel.type : null) {\n      case \"greaterThan\":\n      case \"greaterThanOrEqual\": {\n        return this.setState({\n          min: parentModel.filter,\n        });\n      }\n      case \"lessThan\":\n      case \"lessThanOrEqual\": {\n        return this.setState({\n          max: parentModel.filter,\n        });\n      }\n      case \"inRange\": {\n        return this.setState({\n          min: parentModel.filter,\n          max: parentModel.filterTo,\n        });\n      }\n      default: {\n        return this.setState({\n          min: \"\",\n          max: \"\",\n        });\n      }\n    }\n  }\n\n  render() {\n    const style = {\n      width: \"30%\",\n      margin: \"0 2px\",\n      padding: \"1px\",\n      display: \"flex\",\n      alignItems: \"center\",\n    };\n    return (\n      <>\n        <div style={{height: \"100%\"}} className=\"ag-floating-filter-input\">\n          <input\n            className=\"ag-input-field-input ag-text-field-input\"\n            style={style}\n            type=\"number\"\n            value={this.state.min}\n            name=\"min\"\n            placeholder=\"MIN\"\n            onChange={this.valueChanged}\n          />\n          <input\n            className=\"ag-input-field-input ag-text-field-input\"\n            style={style}\n            type=\"number\"\n            value={this.state.max}\n            name=\"max\"\n            placeholder=\"MAX\"\n            onChange={this.valueChanged}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport function OptionsSelector({options, instruments}) {\n  const columnDefs = [\n    {\n      field: \"instrumentName\",\n      headerName: \"Instrument\",\n      comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {\n        if (nodeA.data.expirationTimestamp !== nodeB.data.expirationTimestamp) {\n          return (\n            nodeA.data.expirationTimestamp - nodeB.data.expirationTimestamp\n          );\n        }\n\n        if (nodeA.data.strike !== nodeB.data.strike) {\n          return nodeA.data.strike - nodeB.data.strike;\n        }\n\n        //https://stackoverflow.com/questions/51165/how-to-sort-strings-in-javascript\n        return nodeA.data.optionType.localeCompare(nodeB.data.optionType);\n      },\n    },\n    {\n      field: \"markPrice\",\n      headerName: \"Mark Price\",\n      type: \"numericColumn\",\n      valueFormatter: (params) =>\n        `$${(params.value * params.data.underlyingPrice).toFixed(\n          2\n        )} (${params.value.toFixed(8)})`,\n    },\n    {\n      field: \"markIv\",\n      headerName: \"IV (Mark)\",\n      type: \"numericColumn\",\n      valueFormatter: (params) => `${params.value.toFixed(2)}`,\n    },\n    ...[\n      {headerName: \"Delta\", field: \"greeks.delta\"},\n      {headerName: \"Gamma\", field: \"greeks.gamma\"},\n      {headerName: \"Vega\", field: \"greeks.vega\"},\n      {headerName: \"Theta\", field: \"greeks.theta\"},\n    ].map((x) =>\n      Object.assign(x, {\n        filter: \"agNumberColumnFilter\",\n        floatingFilterComponent: \"customNumberMinMaxFilter\",\n        floatingFilterComponentParams: {suppressFilterButton: true},\n        type: \"numericColumn\",\n        valueFormatter: (params) => `${params.value.toFixed(5)}`,\n      })\n    ),\n  ];\n\n  const rowData = map(options, (values, instrumentName) => ({\n    ...instruments[instrumentName],\n    ...values,\n  }));\n\n  const onGridReady = (params) => {\n    console.log(\"Grid Ready\", params);\n    params.api.sizeColumnsToFit();\n  };\n\n  return (\n    <div id=\"grid-wrapper\">\n      <div\n        className=\"ag-theme-balham-dark\"\n        style={{\n          height: \"95vh\",\n          width: \"100%\",\n        }}\n      >\n        <AgGridReact\n          onGridReady={onGridReady}\n          floatingFilter\n          columnDefs={columnDefs}\n          defaultColDef={{\n            filter: true,\n            resizable: true,\n            sortable: true,\n          }}\n          rowData={rowData}\n          // enable delta updates for redux\n          deltaRowDataMode={true}\n          getRowNodeId={(data) => data.instrumentName}\n          frameworkComponents={{\n            customNumberMinMaxFilter: MinMaxFilter,\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default connect(\n  (state) => {\n    return {\n      options: state.tickers.tickers,\n      instruments: state.instruments.instruments,\n    };\n  },\n  null,\n  null,\n  {forwardRef: true} // must be supplied for react/redux when using AgGridReact\n)(OptionsSelector);\n","import {createSlice} from \"@reduxjs/toolkit\";\n\nconst slice = createSlice({\n  name: \"websocket\",\n  initialState: {\n    isOpen: false,\n  },\n  reducers: {\n    open: (state) => {\n      state.isOpen = true;\n    },\n    close: (state) => {\n      state.isOpen = false;\n    },\n  },\n});\n\nexport const actions = slice.actions;\n\nexport const selectors = {\n  isOpen: (state) => state.websocket.isOpen,\n};\n\nexport default slice.reducer;\n","import castArray from \"lodash/castArray\";\nimport isArray from \"lodash/isArray\";\nimport ReconnectingWebsocket from \"./reconnecting-websocket\";\nimport {manageSession, transformReply} from \"./deribit-utils\";\n\nconst url =\n  process.env.NODE_ENV === \"production\"\n    ? \"wss://www.deribit.com/ws/api/v2\"\n    : \"wss://test.deribit.com/ws/api/v2\";\n\nconst socket = new ReconnectingWebsocket(url, null, {\n  automaticOpen: false,\n});\n\nsocket.addEventListener(\"message\", (event) => {\n  const e = new CustomEvent(\"json\");\n  e.data = transformReply(JSON.parse(event.data));\n  socket.dispatchEvent(e);\n});\n\nmanageSession(socket, socket.refresh);\n\n// Manage subscriptions\n\n// Key is the channel, value is function handler\nconst subscriptions = {};\nsocket.addEventListener(\"open\", (event) => {\n  socket.send(\n    JSON.stringify({\n      method: \"public/subscribe\",\n      params: {\n        channels: Object.keys(subscriptions),\n      },\n      jsonrpc: \"2.0\",\n      id: Date.now(),\n    })\n  );\n});\n\nsocket.addEventListener(\"json\", (event) => {\n  const message = event.data;\n  if (message.method === \"subscription\") {\n    const {channel, data} = message.params;\n    if (subscriptions[channel]) {\n      subscriptions[channel](data);\n    } else {\n      console.log(\"Ignoring subscription: \", channel);\n    }\n  }\n});\n\nexport const subscriptionAdd = (channelArg, handler) => {\n  const channels = castArray(channelArg);\n  channels.forEach((channel, i) => {\n    subscriptions[channel] = isArray(handler) ? handler[i] : handler;\n  });\n\n  const payload = JSON.stringify({\n    method: \"public/subscribe\",\n    params: {\n      channels,\n    },\n    jsonrpc: \"2.0\",\n    id: Date.now(),\n  });\n\n  // If connection is open send, otherwise wait for connection to open;\n  if (socket.readyState === 1) {\n    socket.send(payload);\n  } else {\n    // Connection opened\n    socket.addEventListener(\"open\", () => socket.send(payload), {\n      once: true,\n    });\n  }\n};\n\nexport const subscriptionRemove = (channelArg) => {\n  const channels = castArray(channelArg);\n  channels.forEach((channel) => {\n    delete channels[channel];\n  });\n  const payload = JSON.stringify({\n    method: \"public/unsubscribe\",\n    params: {\n      channels,\n    },\n    jsonrpc: \"2.0\",\n    id: Date.now(),\n  });\n\n  // If connection is open send, otherwise wait for connection to open;\n  if (socket.readyState === 1) {\n    socket.send(payload);\n  } else {\n    // Connection opened\n    socket.addEventListener(\"open\", () => socket.send(payload), {\n      once: true,\n    });\n  }\n};\n\n// Function to make a rpc call over ws. Will resolve with response\nexport const call = (request, {timeout = 10000} = {}) =>\n  new Promise((resolve, reject) => {\n    const timer = setTimeout(reject, timeout, new Error(\"Call timed out\"));\n\n    const id = Date.now();\n    const payload = JSON.stringify({\n      method: request.method,\n      params: request.params,\n      jsonrpc: \"2.0\",\n      id,\n    });\n\n    function callback(event) {\n      const message = event.data;\n      if (message.id === id) {\n        socket.removeEventListener(\"message\", callback);\n        clearTimeout(timer);\n        return resolve(message);\n      }\n    }\n\n    // If connection is open send, otherwise wait for connection to open;\n    if (socket.readyState === 1) {\n      socket.send(payload);\n    } else {\n      // Connection opened\n      socket.addEventListener(\"open\", () => socket.send(payload), {\n        once: true,\n      });\n    }\n\n    socket.addEventListener(\"json\", callback);\n  });\n\nexport default socket;\n","import camelCase from \"lodash/camelCase\";\nimport isArray from \"lodash/isArray\";\nimport isPlainObject from \"lodash/isPlainObject\";\nimport reduce from \"lodash/reduce\";\n\n// Recursively transform all keys to camelcase\nexport const transformReply = (r) => {\n  if (isPlainObject(r)) {\n    return reduce(\n      r,\n      (result, value, key) => {\n        result[camelCase(key)] = transformReply(value);\n        return result;\n      },\n      {}\n    );\n  }\n\n  // If its a array, transform each element\n  if (isArray(r)) {\n    return r.map((x) => transformReply(x));\n  }\n\n  // Just return base type\n  return r;\n};\n\n// Manages Deribit websocket and reconnects if stale\nexport const manageSession = (ws, reconnect = () => {\n}) => {\n  // Set a timer, if no messages received within interval, refresh connection\n  let timer = null;\n  const interval = 10 * 1000;\n  const allowance = 2000; // Allowance for network\n\n  const resetTimer = () => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      console.warn(\n        `Connection is stale, no message received in ${interval / 1000} seconds`\n      );\n      return reconnect();\n    }, interval + allowance);\n  };\n\n  // Once connection opens, start requesting heartbeats\n  ws.addEventListener(\"open\", () => {\n    ws.send(\n      JSON.stringify({\n        method: \"public/set_heartbeat\",\n        params: {\n          // Seconds (min is 10s)\n          interval: Math.max(parseInt(interval / 1000, 10), 10),\n        },\n        jsonrpc: \"2.0\",\n        id: Date.now(),\n      })\n    );\n  });\n\n  // When connection closes, remove my timer\n  ws.addEventListener(\"close\", () => {\n    clearTimeout(timer);\n  });\n\n  // Listen for messages\n  ws.addEventListener(\"json\", function (event) {\n    // Reset timer on new message\n    resetTimer();\n\n    // I must respond to test_request messages to keep connection alive\n    const message = event.data;\n    if (\n      message.method === \"heartbeat\" &&\n      message.params.type === \"test_request\"\n    ) {\n      ws.send(\n        JSON.stringify({\n          method: \"public/test\",\n          params: {},\n          jsonrpc: \"2.0\",\n          id: Date.now(),\n        })\n      );\n    }\n  });\n};\n","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport {actions, selectors} from \"../store/websocket\";\nimport socket from \"../services/deribit\";\n\nexport function Websocket() {\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    socket.open();\n\n    socket.addEventListener(\"open\", () => {\n      dispatch(actions.open());\n      console.debug(\"Connection to Deribit opened\");\n    });\n\n    socket.addEventListener(\n      \"close\",\n      () => {\n        dispatch(actions.close());\n        console.debug(\"Connection to Deribit closed\");\n      },\n      {once: true}\n    );\n\n    return () => {\n      console.log(\"Closing connection to Deribit\");\n      socket.close();\n    };\n  }, [dispatch]);\n  const isOpen = useSelector(selectors.isOpen);\n  const style = {\n    backgroundColor: isOpen ? \"#7aae1a\" : \"#ff1111\",\n    borderRadius: \"50%\",\n    marginRight: \"8px\",\n    display: \"inline-block\",\n    height: \"12px\",\n    width: \"12px\",\n  };\n\n  return (\n    <div style={{marginLeft: '4px', marginBottom: \"4px\"}}>\n      <span style={style}/>\n      {isOpen ? \"Online\" : \"Connecting...\"}\n    </div>\n  );\n}\n","import pick from \"lodash/pick\";\nimport {createSlice} from \"@reduxjs/toolkit\";\n\n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\nconst slice = createSlice({\n  name: \"tickers\",\n  initialState: {\n    tickers: {},\n  },\n  reducers: {\n    update: (state, {payload}) => {\n      state.tickers[payload.instrumentName] = payload;\n    },\n  },\n});\n\nexport const actions = slice.actions;\n\nexport const tickerSelectorFactory = (ticker) => (state) =>\n  state.tickers.tickers[ticker] || {};\n\nexport const selectors = {\n  tickers: (state) => Object.values(state.tickers.tickers),\n};\n\nexport default slice.reducer;\n","import orderBy from \"lodash/orderBy\";\nimport keyBy from \"lodash/keyBy\";\nimport {createSlice} from \"@reduxjs/toolkit\";\nimport {call} from \"../services/deribit\";\n\n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\nconst slice = createSlice({\n  name: \"instruments\",\n  initialState: {\n    instruments: {},\n  },\n  reducers: {\n    success: (state, {payload}) => {\n      state.instruments = payload;\n    },\n  },\n});\n\nexport const actions = {\n  request: () => (dispatch) =>\n    call({\n      method: \"public/get_instruments\",\n      params: {\n        currency: \"BTC\",\n        kind: \"option\",\n        expired: false,\n      },\n    })\n      .then((r) => r.result)\n      .then((r) =>\n        orderBy(\n          r,\n          [\"expirationTimestamp\", \"strike\", \"optionType\"],\n          [\"asc\", \"asc\", \"asc\"]\n        )\n      )\n      .then((r) => keyBy(r, \"instrumentName\"))\n      .then((r) => dispatch(slice.actions.success(r))),\n};\n\nexport const selectors = {\n  instrument: (state) => state.instruments.instruments,\n  options: (state) => state.instruments.instruments,\n};\n\nexport default slice.reducer;\n","import React from \"react\";\nimport isEmpty from \"lodash/isEmpty\";\nimport map from \"lodash/map\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport \"./App.css\";\nimport OptionsSelector from \"./components/OptionsSelector\";\nimport {Websocket} from \"./components/Websocket\";\nimport {actions as tickers} from \"./store/tickers\";\nimport {actions, selectors} from \"./store/instruments\";\nimport {subscriptionAdd, subscriptionRemove} from \"./services/deribit\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const instruments = useSelector(selectors.options);\n\n  React.useEffect(() => {\n    dispatch(actions.request());\n  }, [dispatch]);\n\n  React.useEffect(() => {\n    if (!isEmpty(instruments)) {\n      const channels = map(\n        instruments,\n        (x) => `ticker.${x.instrumentName}.100ms`\n      );\n      subscriptionAdd(channels, (d) => dispatch(tickers.update(d)));\n      return () => subscriptionRemove(channels);\n    }\n    return () => {\n    };\n  }, [dispatch, instruments]);\n\n  return (\n    <div className=\"App\">\n      <div style={{textAlign: \"left\"}}>\n        <Websocket/>\n      </div>\n      <OptionsSelector/>\n    </div>\n  );\n}\n\nexport default App;\n","import {configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\nimport instruments from \"./instruments\";\nimport tickers from \"./tickers\";\nimport websocket from \"./websocket\";\n\nexport default configureStore({\n  middleware: getDefaultMiddleware({\n    thunk: true,\n    immutableCheck: false,\n    serializableCheck: false,\n  }),\n  reducer: {\n    instruments,\n    tickers,\n    websocket,\n  },\n});\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: {'Service-Worker': 'script'},\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store/store';\r\nimport {Provider} from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App/>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","/* eslint-disable */\r\n// https://raw.githubusercontent.com/joewalnes/reconnecting-websocket/master/reconnecting-websocket.js\r\n// MIT License:\r\n//\r\n// Copyright (c) 2010-2012, Joe Walnes\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n\r\n/**\r\n * This behaves like a WebSocket in every way, except if it fails to connect,\r\n * or it gets disconnected, it will repeatedly poll until it successfully connects\r\n * again.\r\n *\r\n * It is API compatible, so when you have:\r\n *   ws = new WebSocket('ws://....');\r\n * you can replace with:\r\n *   ws = new ReconnectingWebSocket('ws://....');\r\n *\r\n * The event stream will typically look like:\r\n *  onconnecting\r\n *  onopen\r\n *  onmessage\r\n *  onmessage\r\n *  onclose // lost connection\r\n *  onconnecting\r\n *  onopen  // sometime later...\r\n *  onmessage\r\n *  onmessage\r\n *  etc...\r\n *\r\n * It is API compatible with the standard WebSocket API, apart from the following members:\r\n *\r\n * - `bufferedAmount`\r\n * - `extensions`\r\n * - `binaryType`\r\n *\r\n * Latest version: https://github.com/joewalnes/reconnecting-websocket/\r\n * - Joe Walnes\r\n *\r\n * Syntax\r\n * ======\r\n * var socket = new ReconnectingWebSocket(url, protocols, options);\r\n *\r\n * Parameters\r\n * ==========\r\n * url - The url you are connecting to.\r\n * protocols - Optional string or array of protocols.\r\n * options - See below\r\n *\r\n * Options\r\n * =======\r\n * Options can either be passed upon instantiation or set after instantiation:\r\n *\r\n * var socket = new ReconnectingWebSocket(url, null, { debug: true, reconnectInterval: 4000 });\r\n *\r\n * or\r\n *\r\n * var socket = new ReconnectingWebSocket(url);\r\n * socket.debug = true;\r\n * socket.reconnectInterval = 4000;\r\n *\r\n * debug\r\n * - Whether this instance should log debug messages. Accepts true or false. Default: false.\r\n *\r\n * automaticOpen\r\n * - Whether or not the websocket should attempt to connect immediately upon instantiation. The socket can be manually opened or closed at any time using ws.open() and ws.close().\r\n *\r\n * reconnectInterval\r\n * - The number of milliseconds to delay before attempting to reconnect. Accepts integer. Default: 1000.\r\n *\r\n * maxReconnectInterval\r\n * - The maximum number of milliseconds to delay a reconnection attempt. Accepts integer. Default: 30000.\r\n *\r\n * reconnectDecay\r\n * - The rate of increase of the reconnect delay. Allows reconnect attempts to back off when problems persist. Accepts integer or float. Default: 1.5.\r\n *\r\n * timeoutInterval\r\n * - The maximum time in milliseconds to wait for a connection to succeed before closing and retrying. Accepts integer. Default: 2000.\r\n *\r\n */\r\n(function (global, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    define([], factory);\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = factory();\r\n  } else {\r\n    global.ReconnectingWebSocket = factory();\r\n  }\r\n})(this, function () {\r\n\r\n  if (!('WebSocket' in window)) {\r\n    return;\r\n  }\r\n\r\n  function ReconnectingWebSocket(url, protocols, options) {\r\n\r\n    // Default settings\r\n    var settings = {\r\n\r\n      /** Whether this instance should log debug messages. */\r\n      debug: false,\r\n\r\n      /** Whether or not the websocket should attempt to connect immediately upon instantiation. */\r\n      automaticOpen: true,\r\n\r\n      /** The number of milliseconds to delay before attempting to reconnect. */\r\n      reconnectInterval: 1000,\r\n      /** The maximum number of milliseconds to delay a reconnection attempt. */\r\n      maxReconnectInterval: 30000,\r\n      /** The rate of increase of the reconnect delay. Allows reconnect attempts to back off when problems persist. */\r\n      reconnectDecay: 1.5,\r\n\r\n      /** The maximum time in milliseconds to wait for a connection to succeed before closing and retrying. */\r\n      timeoutInterval: 2000,\r\n\r\n      /** The maximum number of reconnection attempts to make. Unlimited if null. */\r\n      maxReconnectAttempts: null,\r\n\r\n      /** The binary type, possible values 'blob' or 'arraybuffer', default 'blob'. */\r\n      binaryType: 'blob'\r\n    }\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n\r\n    // Overwrite and define settings with options if they exist.\r\n    for (var key in settings) {\r\n      if (typeof options[key] !== 'undefined') {\r\n        this[key] = options[key];\r\n      } else {\r\n        this[key] = settings[key];\r\n      }\r\n    }\r\n\r\n    // These should be treated as read-only properties\r\n\r\n    /** The URL as resolved by the constructor. This is always an absolute URL. Read only. */\r\n    this.url = url;\r\n\r\n    /** The number of attempted reconnects since starting, or the last successful connection. Read only. */\r\n    this.reconnectAttempts = 0;\r\n\r\n    /**\r\n     * The current state of the connection.\r\n     * Can be one of: WebSocket.CONNECTING, WebSocket.OPEN, WebSocket.CLOSING, WebSocket.CLOSED\r\n     * Read only.\r\n     */\r\n    this.readyState = WebSocket.CONNECTING;\r\n\r\n    /**\r\n     * A string indicating the name of the sub-protocol the server selected; this will be one of\r\n     * the strings specified in the protocols parameter when creating the WebSocket object.\r\n     * Read only.\r\n     */\r\n    this.protocol = null;\r\n\r\n    // Private state variables\r\n\r\n    var self = this;\r\n    var ws;\r\n    var forcedClose = false;\r\n    var timedOut = false;\r\n    var eventTarget = document.createElement('div');\r\n\r\n    // Wire up \"on*\" properties as event handlers\r\n\r\n    eventTarget.addEventListener('open', function (event) {\r\n      self.onopen(event);\r\n    });\r\n    eventTarget.addEventListener('close', function (event) {\r\n      self.onclose(event);\r\n    });\r\n    eventTarget.addEventListener('connecting', function (event) {\r\n      self.onconnecting(event);\r\n    });\r\n    eventTarget.addEventListener('message', function (event) {\r\n      self.onmessage(event);\r\n    });\r\n    eventTarget.addEventListener('error', function (event) {\r\n      self.onerror(event);\r\n    });\r\n\r\n    // Expose the API required by EventTarget\r\n\r\n    this.addEventListener = eventTarget.addEventListener.bind(eventTarget);\r\n    this.removeEventListener = eventTarget.removeEventListener.bind(eventTarget);\r\n    this.dispatchEvent = eventTarget.dispatchEvent.bind(eventTarget);\r\n\r\n    /**\r\n     * This function generates an event that is compatible with standard\r\n     * compliant browsers and IE9 - IE11\r\n     *\r\n     * This will prevent the error:\r\n     * Object doesn't support this action\r\n     *\r\n     * http://stackoverflow.com/questions/19345392/why-arent-my-parameters-getting-passed-through-to-a-dispatched-event/19345563#19345563\r\n     * @param s String The name that the event should use\r\n     * @param args Object an optional object that the event will use\r\n     */\r\n    function generateEvent(s, args) {\r\n      var evt = document.createEvent(\"CustomEvent\");\r\n      evt.initCustomEvent(s, false, false, args);\r\n      return evt;\r\n    };\r\n\r\n    this.open = function (reconnectAttempt) {\r\n      ws = new WebSocket(self.url, protocols || []);\r\n      ws.binaryType = this.binaryType;\r\n\r\n      if (reconnectAttempt) {\r\n        if (this.maxReconnectAttempts && this.reconnectAttempts > this.maxReconnectAttempts) {\r\n          return;\r\n        }\r\n      } else {\r\n        eventTarget.dispatchEvent(generateEvent('connecting'));\r\n        this.reconnectAttempts = 0;\r\n      }\r\n\r\n      if (self.debug || ReconnectingWebSocket.debugAll) {\r\n        console.debug('ReconnectingWebSocket', 'attempt-connect', self.url);\r\n      }\r\n\r\n      var localWs = ws;\r\n      var timeout = setTimeout(function () {\r\n        if (self.debug || ReconnectingWebSocket.debugAll) {\r\n          console.debug('ReconnectingWebSocket', 'connection-timeout', self.url);\r\n        }\r\n        timedOut = true;\r\n        localWs.close();\r\n        timedOut = false;\r\n      }, self.timeoutInterval);\r\n\r\n      ws.onopen = function (event) {\r\n        clearTimeout(timeout);\r\n        if (self.debug || ReconnectingWebSocket.debugAll) {\r\n          console.debug('ReconnectingWebSocket', 'onopen', self.url);\r\n        }\r\n        self.protocol = ws.protocol;\r\n        self.readyState = WebSocket.OPEN;\r\n        self.reconnectAttempts = 0;\r\n        var e = generateEvent('open');\r\n        e.isReconnect = reconnectAttempt;\r\n        reconnectAttempt = false;\r\n        eventTarget.dispatchEvent(e);\r\n      };\r\n\r\n      ws.onclose = function (event) {\r\n        clearTimeout(timeout);\r\n        ws = null;\r\n        if (forcedClose) {\r\n          self.readyState = WebSocket.CLOSED;\r\n          eventTarget.dispatchEvent(generateEvent('close'));\r\n        } else {\r\n          self.readyState = WebSocket.CONNECTING;\r\n          var e = generateEvent('connecting');\r\n          e.code = event.code;\r\n          e.reason = event.reason;\r\n          e.wasClean = event.wasClean;\r\n          eventTarget.dispatchEvent(e);\r\n          if (!reconnectAttempt && !timedOut) {\r\n            if (self.debug || ReconnectingWebSocket.debugAll) {\r\n              console.debug('ReconnectingWebSocket', 'onclose', self.url);\r\n            }\r\n            eventTarget.dispatchEvent(generateEvent('close'));\r\n          }\r\n\r\n          var timeout = self.reconnectInterval * Math.pow(self.reconnectDecay, self.reconnectAttempts);\r\n          setTimeout(function () {\r\n            self.reconnectAttempts++;\r\n            self.open(true);\r\n          }, timeout > self.maxReconnectInterval ? self.maxReconnectInterval : timeout);\r\n        }\r\n      };\r\n      ws.onmessage = function (event) {\r\n        if (self.debug || ReconnectingWebSocket.debugAll) {\r\n          console.debug('ReconnectingWebSocket', 'onmessage', self.url, event.data);\r\n        }\r\n        var e = generateEvent('message');\r\n        e.data = event.data;\r\n        eventTarget.dispatchEvent(e);\r\n      };\r\n      ws.onerror = function (event) {\r\n        if (self.debug || ReconnectingWebSocket.debugAll) {\r\n          console.debug('ReconnectingWebSocket', 'onerror', self.url, event);\r\n        }\r\n        eventTarget.dispatchEvent(generateEvent('error'));\r\n      };\r\n    }\r\n\r\n    // Whether or not to create a websocket upon instantiation\r\n    if (this.automaticOpen == true) {\r\n      this.open(false);\r\n    }\r\n\r\n    /**\r\n     * Transmits data to the server over the WebSocket connection.\r\n     *\r\n     * @param data a text string, ArrayBuffer or Blob to send to the server.\r\n     */\r\n    this.send = function (data) {\r\n      if (ws) {\r\n        if (self.debug || ReconnectingWebSocket.debugAll) {\r\n          console.debug('ReconnectingWebSocket', 'send', self.url, data);\r\n        }\r\n        return ws.send(data);\r\n      } else {\r\n        throw 'INVALID_STATE_ERR : Pausing to reconnect websocket';\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Closes the WebSocket connection or connection attempt, if any.\r\n     * If the connection is already CLOSED, this method does nothing.\r\n     */\r\n    this.close = function (code, reason) {\r\n      // Default CLOSE_NORMAL code\r\n      if (typeof code == 'undefined') {\r\n        code = 1000;\r\n      }\r\n      forcedClose = true;\r\n      if (ws) {\r\n        ws.close(code, reason);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Additional public API method to refresh the connection if still open (close, re-open).\r\n     * For example, if the app suspects bad data / missed heart beats, it can try to refresh.\r\n     */\r\n    this.refresh = function () {\r\n      if (ws) {\r\n        ws.close();\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * An event listener to be called when the WebSocket connection's readyState changes to OPEN;\r\n   * this indicates that the connection is ready to send and receive data.\r\n   */\r\n  ReconnectingWebSocket.prototype.onopen = function (event) {\r\n  };\r\n  /** An event listener to be called when the WebSocket connection's readyState changes to CLOSED. */\r\n  ReconnectingWebSocket.prototype.onclose = function (event) {\r\n  };\r\n  /** An event listener to be called when a connection begins being attempted. */\r\n  ReconnectingWebSocket.prototype.onconnecting = function (event) {\r\n  };\r\n  /** An event listener to be called when a message is received from the server. */\r\n  ReconnectingWebSocket.prototype.onmessage = function (event) {\r\n  };\r\n  /** An event listener to be called when an error occurs. */\r\n  ReconnectingWebSocket.prototype.onerror = function (event) {\r\n  };\r\n\r\n  /**\r\n   * Whether all instances of ReconnectingWebSocket should log debug messages.\r\n   * Setting this to true is the equivalent of setting all instances of ReconnectingWebSocket.debug to true.\r\n   */\r\n  ReconnectingWebSocket.debugAll = false;\r\n\r\n  ReconnectingWebSocket.CONNECTING = WebSocket.CONNECTING;\r\n  ReconnectingWebSocket.OPEN = WebSocket.OPEN;\r\n  ReconnectingWebSocket.CLOSING = WebSocket.CLOSING;\r\n  ReconnectingWebSocket.CLOSED = WebSocket.CLOSED;\r\n\r\n  return ReconnectingWebSocket;\r\n});\r\n"],"sourceRoot":""}